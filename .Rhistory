mod <- train(pred[,10] ~ pred[-10], method="glm",
family="binomial")
pred[,10]
View(pred)
mod <- train(pred[,7] ~ pred[-7], method="glm",
family="binomial")
mod <- train(chd ~ ., data=pred,method="glm",
family="binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass
testTrimmed <- testSA[,c(2,3,6:10)]
trainPred <- predict(mod$finalModel,pred[-7])
misTrain <- missClass(pred$chd,trainPred)
misTrain
trainPred <- predict(mod$finalModel,pred[,-7])
misTrain <- missClass(pred$chd,trainPred)
misTrain
testPred <- predict(mod$finalModel,testTrimmed[,-7])
misTest <- missClass(testTrimmed$chd,testPred)
misTest
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
trainSA <- trainSA[,c(2,3,6:10)]
testSA <- testSA[,c(2,3,6:10)]
mod <- train(chd ~ ., data=trainSA,method="glm",
family="binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
trainPred <- predict(mod$finalModel,trainSA[,-7])
misTrain <- missClass(trainSA$chd,trainPred)
testPred <- predict(mod$finalModel,testSA[,-7])
misTest <- missClass(testSA$chd,testPred)
misTrain
misTest
mod$finalModel
View(trainSA)
View(testSA)
View(trainSA[,-7])
trainPred
testPred
misTest
misTrain
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
View(vowel.train)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
?varImp
?train
?rf
mod <- train(y ~ ., method="rf",data=vowel.train)
mod <- train(y ~ ., method="rf",data=vowel.train)
i <- varImp(mod$finalModel)
i
class(i)
i[order("Overall")]
i[order(i$Overall)]
names(i)
order(i$Overall)
o <- order(i$Overall)
i[o]
i[o,]
i[order(i$Overall),]
i
?randomForest
mod <- randomForest(y ~ ., method="rf",data=vowel.train)
mod
i <- varImp(mod)
i
trainFile <- "C:\Users\Maria\Desktop\Data Science Specialization\Machine Learning\Project\pml-training.csv"
trainFile <- "C:\\Users\\Maria\\Desktop\\Data Science Specialization\\Machine Learning\\Project\\pml-training.csv"
trainSet <- read.csv(trainFile)
View(trainSet)
View(trainSet[1:10,"classe"])
class(trainSet$user_name)
trainSet <- read.csv(trainFile,stringsAsFactors=FALSE)
class(trainSet$user_name)
testFile <- "C:\\Users\\Maria\\Desktop\\Data Science Specialization\\Machine Learning\\Project\\pml-testing.csv"
testSet <- read.csv(testFile,stringsAsFactors=FALSE)
testLabels <- trainSet$classe
View(testSet)
library(e1071)
library(forecast)
install.packages("forecast")
library(forecast)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
view(vowel.train)
View(vowel.train)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
library(randomForest)
?randomForest
library(caret)
rfmodel <- train(y ~ ., data=vowel.train, method="rf")
gbmmodel <- train(y ~ ., data=vowel.train, method="gbm")
View(vowel.test)
rfpred <- predict(rfmodel, newdata=vowel.test[,-1])
gbmpred <- predict(gbmmodel, newdata=vowel.test[,-1])
rfpred
?predict
?rf
?randomForest
rfpred$confusion
str(rfpred)
rcm <- confusionMatrix(rfpred$predict, vowel.test$y)
rcm <- confusionMatrix(rfpred, vowel.test$y)
rcm
gbmcm <- confusionMatrix(gbmpred, vowel.test$y)
gbmcm
count(rfpred==gbmpred)
308/462
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
View(training)
rfmodel <- train(diagnosis ~ ., data=training, method="rf")
gbmmodel <- train(diagnosis ~ ., data=training, method="gbm")
ldamodel <- train(diagnosis ~ ., data=training, method="lda")
predDF <- data.frame(rfpred,gbmpred,ldapred,
diagnosis=training$diagnosis)
ldapred <- predict(ldamodel, newdata=training[,-1])
ldapred
predDF <- data.frame(rfpred,gbmpred,ldapred,
diagnosis=training$diagnosis)
dim(rfpred)
length(rfpred)
length(gbmpred)
length(ldapred)
ldamodel <- train(diagnosis ~ ., data=training, method="lda")
ldapred <- predict(ldamodel, newdata=training[,-1])
length(ldapredict)
length(ldapred)
?lda
?trainControl
?train
ldamodel <- train(diagnosis ~ ., data=training, method="lda",
trControl=trainControl(method="none"))
ldapred <- predict(ldamodel, newdata=training[,-1])
length(ldapred)
rm(list=c("rfmodel","gbmmodel","ldamodel"))
rm(list=c("rfpred","gbmpred","ldapred"))
rfmodel <- train(diagnosis ~ ., data=training, method="rf")
gbmmodel <- train(diagnosis ~ ., data=training, method="gbm")
ldapred <- predict(ldamodel, newdata=training[,-1])
ldamodel <- train(diagnosis ~ ., data=training, method="lda")
rfpred <- predict(rfmodel, newdata=training[,-1])
gbmpred <- predict(gbmmodel, newdata=training[,-1])
ldapred <- predict(ldamodel, newdata=training[,-1])
predDF <- data.frame(rfpred,gbmpred,ldapred,
diagnosis=training$diagnosis)
combomodel <- train(diagnosis ~ ., method="gam",data=predDF)
View(testing)
rftest <- predict(rfmodel, newdata=testing[,-1])
gbmtest <- predict(gbmmodel, newdata=testing[,-1])
ldatest <- predict(ldamodel, newdata=testing[,-1])
comtest <- predict(combomodel, newdata=testing[,-1])
rfcm <- confusionMatrix(rftest,testing$diagnosis)
gbmcm <- confusionMatrix(gbmtest,testing$diagnosis)
ldacm <- confusionMatrix(ldatest,testing$diagnosis)
comcm <- confusionMatrix(comtest,testing$diagnosis)
dim(predDF)
rm(combomodel)
rm(combotest)
combomodel <- train(diagnosis ~ ., method="rf",data=predDF)
comtest <- predict(combomodel, newdata=testing[,-1])
comcm <- confusionMatrix(comtest,testing$diagnosis)
pred2DF <- data.frame(rftest,gbmtest,ldatest)
comtest <- predict(combomodel, newdata=pred2DF)
comcm <- confusionMatrix(comtest,testing$diagnosis)
rm(list=ls())
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
rfmodel <- train(diagnosis ~ ., data=training, method="rf")
gbmmodel <- train(diagnosis ~ ., data=training, method="gbm")
ldamodel <- train(diagnosis ~ ., data=training, method="lda")
rfpred <- predict(rfmodel, newdata=training[,-1])
gbmpred <- predict(gbmmodel, newdata=training[,-1])
ldapred <- predict(ldamodel, newdata=training[,-1])
predDF <- data.frame(rfpred,gbmpred,ldapred,
diagnosis=training$diagnosis)
combomodel <- train(diagnosis ~ ., method="rf",data=predDF)
combomodel
ldapred
ldamodel
rftest <- predict(rfmodel, newdata=testing[,-1])
gbmtest <- predict(gbmmodel, newdata=testing[,-1])
ldatest <- predict(ldamodel, newdata=testing[,-1])
rfcm <- confusionMatrix(rftest,testing$diagnosis)
gbmcm <- confusionMatrix(gbmtest,testing$diagnosis)
ldacm <- confusionMatrix(ldatest,testing$diagnosis)
pred2DF <- data.frame(rftest,gbmtest,ldatest)
dim(pred2DF)
View(pred2DF)
comtest <- predict(combomodel, newdata=pred2DF)
View(predDF)
pred2DF <- data.frame(rfpred=rftest,gbmpred=gbmtest,
ldapred=ldatest)
comtest <- predict(combomodel, newdata=pred2DF)
comcm <- confusionMatrix(comtest,testing$diagnosis)
comcm
rfcm$accuracy
rfcm
gbmcm
ldacm
rm(list=ls())
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
View(training)
lasmod <- train(CompressiveStrength ~ ., data=training,
method="ridge")
lasmod <- train(CompressiveStrength ~ ., data=training,
method="ridge")
lasmod
?plot.enet
plot.enet(lasmod)
str(lasmod)
lasmod$obslevels
lasmod$finalModel
plot.enet(lasmod$finalModel)
library(lubridate)  # For year() function below
library(forecast)
dat = read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(lubridate)  # For year() function below
library(forecast)
library(caret)
dat = read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv")
dat = read.csv("http://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
View(training)
?bats
mod <- bats(tstrain)
mod
?forecast
nrow(testing)
nrow(training)
pred <- forecast(mod, h=235)
acc <- accuracy(pred,testing)
tstest <- ts(testing$visitsTumblr)
acc <- accuracy(pred, tstest)
plot(pred)
lines(tstest)
View(testing)
?accuracy
pred
str(pred)
names(pred)
pred$lower
names(pred)
inInt <- (tstest <= pred$upper) & (tstest >= pred$lower)
length(tstest)
View(tstest)
pred$upper
pred <- forecast(mod, h=235, level=95)
acc <- accuracy(pred, tstest)
inInt <- (tstest <= pred$upper) & (tstest >= pred$lower)
length(inInt)
cum(inInt)
sum(inInt)
226/235
rm(list=ls())
library(caret)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
?svm
View(training)
svmmod <- svm(CompressiveStrength ~ ., data=training)
View(testing)
pred <- predict(svmmod,testing[,1:8])
sqrt( mean( (svmmod-testing[,9])^2 , na.rm = TRUE ) )
svmmod
names(svmmod)
sqrt( mean( (svmmod$fitted-testing[,9])^2 , na.rm = TRUE ) )
sqrt( mean( (svmmod$fitted-testing[,9])^2) )
sqrt(sum(svmmod$fitted-testing[,9])^2))
sqrt(sum((svmmod$fitted-testing[,9])^2))
sqrt(sum((svmmod$fitted-testing[,9])^2)/256)
rm(list=ls())
library(caret)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
svmmod <- svm(CompressiveStrength ~ ., data=training)
pred <- predict(svmmod,testing[,1:8])
names(pred)
sqrt(sum((predd-testing[,9])^2)/256)
sqrt(sum((pred-testing[,9])^2)/256)
library(knitr)
?kable
library(Rtools)
install.packages("Rtools")
install.packages("Rtools")
Rversion()
Sys.getenv("PATH")
install.packages("shiny")
libray(shiny)
library(shiny)
install.packages("manipulate")
install.packages("manipulate")
library(manipulate)
??manipulate
install.packages("rCharts")
install.packages("rCharts")
library(rCharts)
library(devtools)
install_github('rCharts', 'ramnathv')
library(rCharts)
install.packages("morris")
install.packages("Morris")
?mPlot
install.packages("google")
install.packages("googleVis")
library(googleVis)
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='msea', token='1AD483B0535C7BA5D027E96013144996', secret='o/5OIfnT/P0l4YQJmDg3ZpDyoVypUqTq90dW2SbD')
library(shinyapps)
shinyapps::deployApp('path/to/your/app')
install_github("ropensci.plotly")
install_github("ropensci/plotly")
library(plotly)
set_credentials_file("mseale", "25w5yn7hn3")
install_github("slidify","ramnathv")
install_github("slidifyLibraries","ramnathv")
library(slidify)
?lm
?dgamma
?colSums
?show
str(lm)
str(colSums)
str(dgamma)
str(show)
getOption("defaultPackages")
methods("axis")
methods("colSums")
methods("dgamma")
methods("lm")
methods("show")
?isGeneric
isGeneric("lm")
isGeneric("dgamma")
isGeneric("show")
isGeneric("colSums")
isGeneric("colSums", where="package:base")
isGeneric("show", where="package:base")
isGeneric("dgamma", where="package:base")
isGeneric("lm", where="package:base")
isGeneric("show", where="package::base")
getGenerics(where="package:base")
library(shiny)
library(help="datasets"
)
View(Loblolly)
?Loblolly
?nls
View(Orange)
?JohnsonJohnson
?presidents
View(presidents)
?WorldPhones
?cars
View(women)
install.packages("vegan")
??vegan
fruit_file <- "C:\Users\Maria\Desktop\Data Science Specialization\Data Products\ficrdc_fruit.xls"
fruit_file <- "C:\\Users\\Maria\\Desktop\\Data Science Specialization\\Data Products\\ficrdc_fruit.xls"
fruit <- read_csv(fruit_file)
fruit <- read.csv(fruit_file)
fruit_file <- "C:\\Users\\Maria\\Desktop\\Data Science Specialization\\Data Products\\ficrdc_fruit.csv"
fruit <- read.csv(fruit_file)
fruit_file <- "C:\\Users\\Maria\\Desktop\\Data Science Specialization\\Data Products\\ficrcd_fruit.csv"
fruit <- read.csv(fruit_file)
View(fruit)
?read.csv
rm(fruit)
fruit <- read.csv(fruit_file)
View(fruit)
fruit <- read.csv(fruit_file)
View(fruit)
fruit <- read.csv(fruit_file)
View(fruit)
fruit[,1] <- to.lower(fruit[,1])
fruit[,1] <- tolower(fruit[,1])
View(fruit)
fruit <- read.csv(fruit_file)
fruit[,1] <- tolower(fruit[,1])
fruit <- read.csv(fruit_file)
fruit_file <- "C:\\Users\\Maria\\Desktop\\Data Science Specialization\\Data Products\\Project\\ficrcd_fruit.csv"
fruit <- read.csv(fruit_file)
fruit[,1] <- tolower(fruit[,1])
View(fruit)
income <- "low"; gender <- "male"; age <- 1
weight <- "healthy"; education <- 1
race_eth <- "white"
expr <- paste(income, gender, age, weight,
education, race_eth, sep="|")
expr
income <- "low"; gender <- "male"; age <- "2-11"
weight <- "healthy"; education <- "less"
race_eth <- "white"
expr <- paste(income, gender, age, weight,
education, race_eth, sep="|")
expr
dat <- fruit[grep(expr),3:11]
dat <- fruit[grep(expr, fruit[,1]),3:11]
View(dat)
expr <- paste(income, paste(gender, age,sep="&"), weight,
education, race_eth, sep="|")
expr
dat <- fruit[grep(expr, fruit[,1]),3:11]
View(dat)
fruit <- read.csv(fruit_file)
fruit[,1] <- tolower(fruit[,1])
View(fruit)
expr <- paste(income, paste(gender, age,sep="&"),
paste(adult, weight),
education, race_eth, sep="|")
adult <- "child"
expr <- paste(income, paste(gender, age,sep="&"),
paste(adult, weight),
education, race_eth, sep="|")
expr
expr <- paste(income, paste(gender, age),
paste(adult, weight),
education, race_eth, sep="|")
expr
dat <- fruit[grep(expr, fruit[,1]),3:11]
View(dat)
fruit[grep("male*2-11", fruit[,1]),3:11]
fruit <- read.csv(fruit_file)
fruit[,1] <- tolower(fruit[,1])
View(fruits)
View(fruit)
?grep
grep("male[a-z]*2-11",fruit[,1])
R.Version()
shiny::runApp('C:/Users/Maria/Desktop/Data Science Specialization/Data Products/Project')
shiny::runApp('C:/Users/Maria/Desktop/Data Science Specialization/Data Products/Project')
shiny::runApp('C:/Users/Maria/Desktop/Data Science Specialization/Data Products/Project')
shiny::runApp('C:/Users/Maria/Desktop/Data Science Specialization/Data Products/Project')
shiny::runApp('C:/Users/Maria/Desktop/Data Science Specialization/Data Products/Project')
shiny::runApp('C:/Users/Maria/Desktop/Data Science Specialization/Data Products/Project')
shiny::runApp('C:/Users/Maria/Desktop/Data Science Specialization/Data Products/Project')
shiny::runApp('C:/Users/Maria/Desktop/Data Science Specialization/Data Products/Project')
shiny::runApp('C:/Users/Maria/Desktop/Data Science Specialization/Data Products/Project')
shiny::runApp('C:/Users/Maria/Desktop/Data Science Specialization/Data Products/Project')
# Load data
fruit_file <- "C:\\Users\\Maria\\Desktop\\Data Science Specialization\\Data Products\\Project\\ficrcd_fruit.csv"
fruit <- read.csv(fruit_file)
fruit[,1] <- tolower(fruit[,1])
fruit[1:5,]
library(slidify)
getwd()
setwd("C:\Users\Maria\Desktop\Data Science Specialization\Data Products\Project")
setwd("C:/Users/Maria/Desktop/Data Science Specialization/Data Products/Project")
author("fruitpres")
author("new")
shiny::runApp('C:/Users/Maria/Desktop/Data Science Specialization/Data Products/Project')
shiny::runApp('C:/Users/Maria/Desktop/Data Science Specialization/Data Products/Project')
shiny::runApp('C:/Users/Maria/Desktop/Data Science Specialization/Data Products/Project')
shiny::runApp('C:/Users/Maria/Desktop/Data Science Specialization/Data Products/Project')
shiny::runApp('C:/Users/Maria/Desktop/Data Science Specialization/Data Products/Project')
shiny::runApp('C:/Users/Maria/Desktop/Data Science Specialization/Data Products/Project')
shiny::runApp()
library(shinyapps)
shinyapps::deployApp('C:/Users/Maria/Desktop/Data Science Specialization/Data Products/Project')
shinyapps::setAccountInfo(name='msea', token='1AD483B0535C7BA5D027E96013144996', secret='o/5OIfnT/P0l4YQJmDg3ZpDyoVypUqTq90dW2SbD')
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
shinyapps::deployApp('C:/Users/Maria/Desktop/Data Science Specialization/Data Products/Project')
